version: '3.8'

services:
  # API service
  api:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile
      target: development
    container_name: my-many-books-api
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=my_many_books_dev
      - DB_USER=api_user
      - DB_PASSWORD=api_password
      - DB_SSL=false
      - LOG_LEVEL=debug
      - API_VERSION=1.0.0
      - OPEN_LIBRARY_BASE_URL=https://openlibrary.org
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../../src:/app/src
      - ../../config:/app/config
      - ../../database:/app/database
      - /app/node_modules
    networks:
      - my-many-books-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MySQL database
  mysql:
    image: mysql:8.0
    container_name: my-many-books-mysql
    environment:
      - MYSQL_ROOT_PASSWORD=root_password
      - MYSQL_DATABASE=my_many_books_dev
      - MYSQL_USER=api_user
      - MYSQL_PASSWORD=api_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf:ro
    networks:
      - my-many-books-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "api_user", "-papi_password"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: --default-authentication-plugin=mysql_native_password

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: my-many-books-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - my-many-books-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    command: redis-server /usr/local/etc/redis/redis.conf

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: my-many-books-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - my-many-books-network
    restart: unless-stopped
    profiles:
      - with-nginx

  # Adminer for database management
  adminer:
    image: adminer:latest
    container_name: my-many-books-adminer
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=mysql
    depends_on:
      - mysql
    networks:
      - my-many-books-network
    restart: unless-stopped
    profiles:
      - with-adminer

  # Prometheus for metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: my-many-books-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - my-many-books-network
    restart: unless-stopped
    profiles:
      - with-monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: my-many-books-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - my-many-books-network
    restart: unless-stopped
    profiles:
      - with-monitoring

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  my-many-books-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16