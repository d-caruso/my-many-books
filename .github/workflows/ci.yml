name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  CACHE_KEY: node-modules

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: my_many_books_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Wait for MySQL
        run: |
          until mysqladmin ping -h"127.0.0.1" -P3306 -uroot -ptest_password --silent; do
            echo 'Waiting for MySQL...'
            sleep 2
          done

      - name: Setup Test Environment
        run: |
          cp .env.example .env.test
          echo "NODE_ENV=test" >> .env.test
          echo "DB_HOST=127.0.0.1" >> .env.test
          echo "DB_PORT=3306" >> .env.test
          echo "DB_NAME=my_many_books_test" >> .env.test
          echo "DB_USER=test_user" >> .env.test
          echo "DB_PASSWORD=test_password" >> .env.test
          echo "DB_SSL=false" >> .env.test

      - name: Run Database Migrations
        run: |
          export $(cat .env.test | grep -v '^#' | xargs)
          npm run db:migrate
        env:
          NODE_ENV: test

      - name: Run Database Seeds
        run: |
          export $(cat .env.test | grep -v '^#' | xargs)
          npm run db:seed
        env:
          NODE_ENV: test

      - name: Run Linting
        run: npm run lint

      - name: Run Type Checking
        run: npm run build

      - name: Run Unit Tests
        run: npm run test:coverage
        env:
          NODE_ENV: test

      - name: Run Integration Tests
        run: npm run test:integration
        env:
          NODE_ENV: test
        continue-on-error: true

      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Archive Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            test-results.xml

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Security Audit
        run: npm audit --audit-level=moderate

      - name: Run Dependency Check
        run: |
          npx audit-ci --moderate
        continue-on-error: true

      - name: Scan for Secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint -- --format=json --output-file=eslint-report.json
        continue-on-error: true

      - name: Run Prettier Check
        run: npm run format -- --check
        continue-on-error: true

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

      - name: Upload Code Quality Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: code-quality-reports
          path: |
            eslint-report.json
            .scannerwork/

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, security-scan, code-quality]
    
    strategy:
      matrix:
        stage: [dev, staging, prod]
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build Application
        run: npm run build
        env:
          NODE_ENV: ${{ matrix.stage == 'prod' && 'production' || 'development' }}

      - name: Package for Deployment
        run: |
          mkdir -p dist/deploy
          cp -r dist/* dist/deploy/
          cp package.json package-lock.json dist/deploy/
          cp serverless.yml dist/deploy/
          cp -r config dist/deploy/
          cp -r database dist/deploy/
          
          cd dist/deploy
          npm ci --production --ignore-scripts
          
          # Create deployment artifact
          cd ..
          tar -czf ../my-many-books-api-${{ matrix.stage }}.tar.gz deploy/

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.stage }}
          path: my-many-books-api-${{ matrix.stage }}.tar.gz
          retention-days: 30

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployment/docker/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate
          allow-ghsas: |
            GHSA-example-1234
          deny-licenses: |
            GPL-2.0
            GPL-3.0

  api-testing:
    name: API Testing
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Newman
        run: npm install -g newman newman-reporter-htmlextra

      - name: Start Local Server
        run: |
          npm ci
          npm run build
          npm run local &
          
          # Wait for server to start
          sleep 30
          
          # Health check
          curl -f http://localhost:3000/health || exit 1
        env:
          NODE_ENV: test

      - name: Run Postman Collection
        run: |
          newman run postman/My-Many-Books-API.postman_collection.json \
            -e postman/environments/Local-Development.postman_environment.json \
            --reporters cli,htmlextra \
            --reporter-htmlextra-export newman-report.html \
            --timeout-request 30000 \
            --delay-request 500
        continue-on-error: true

      - name: Upload API Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: api-test-results
          path: newman-report.html

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, security-scan, code-quality, build, docker-build]
    if: always()
    
    steps:
      - name: Notify Success
        if: needs.test.result == 'success' && needs.build.result == 'success'
        run: |
          echo "✅ CI Pipeline completed successfully"
          echo "All tests passed and build artifacts created"

      - name: Notify Failure
        if: needs.test.result == 'failure' || needs.build.result == 'failure'
        run: |
          echo "❌ CI Pipeline failed"
          echo "Check the failed jobs for details"
          exit 1

      # Optional: Slack notification
      # - name: Slack Notification
      #   uses: 8398a7/action-slack@v3
      #   if: always()
      #   with:
      #     status: ${{ job.status }}
      #     channel: '#deployments'
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}