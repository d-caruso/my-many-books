version: '3.8'

services:
  # Production API service
  api:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile
      target: production
    image: my-many-books-api:latest
    container_name: my-many-books-api-prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT:-3306}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_SSL=${DB_SSL:-true}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - API_VERSION=${API_VERSION:-1.0.0}
      - API_KEYS_ENABLED=${API_KEYS_ENABLED:-true}
      - COGNITO_ENABLED=${COGNITO_ENABLED:-true}
      - COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID}
      - COGNITO_CLIENT_ID=${COGNITO_CLIENT_ID}
      - OPEN_LIBRARY_BASE_URL=${OPEN_LIBRARY_BASE_URL:-https://openlibrary.org}
      - GOOGLE_BOOKS_API_KEY=${GOOGLE_BOOKS_API_KEY}
      - CACHE_TTL=${CACHE_TTL:-3600}
      - REQUEST_TIMEOUT=${REQUEST_TIMEOUT:-10000}
      - MAX_RETRIES=${MAX_RETRIES:-3}
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - my-many-books-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache
      - /var/run

  # Production MySQL database
  mysql:
    image: mysql:8.0
    container_name: my-many-books-mysql-prod
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_NAME}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASSWORD}
    volumes:
      - mysql_prod_data:/var/lib/mysql
      - ./mysql/prod.cnf:/etc/mysql/conf.d/prod.cnf:ro
      - ./mysql/init-prod.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - my-many-books-network
    restart: always
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${DB_USER}", "-p${DB_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    command: >
      --default-authentication-plugin=mysql_native_password
      --max-connections=200
      --innodb-buffer-pool-size=256M
      --slow-query-log=1
      --slow-query-log-file=/var/lib/mysql/slow.log
      --long-query-time=2
      --log-queries-not-using-indexes=1
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    ports:
      - "127.0.0.1:3306:3306"  # Only bind to localhost

  # Production Redis
  redis:
    image: redis:7-alpine
    container_name: my-many-books-redis-prod
    volumes:
      - redis_prod_data:/data
      - ./redis/redis-prod.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - my-many-books-network
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    command: redis-server /usr/local/etc/redis/redis.conf
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"
    ports:
      - "127.0.0.1:6379:6379"  # Only bind to localhost

  # Nginx reverse proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: my-many-books-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx-prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/htpasswd:/etc/nginx/htpasswd:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
    networks:
      - my-many-books-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    security_opt:
      - no-new-privileges:true

  # Log aggregation with Fluentd
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: my-many-books-fluentd
    volumes:
      - ./logging/fluent.conf:/fluentd/etc/fluent.conf:ro
      - ./logging/plugins:/fluentd/plugins:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - FLUENTD_CONF=fluent.conf
      - FLUENTD_OPT=-v
    networks:
      - my-many-books-network
    restart: always
    profiles:
      - with-logging

  # Database backup service
  db-backup:
    image: mysql:8.0
    container_name: my-many-books-backup
    environment:
      - MYSQL_HOST=mysql
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_DATABASE=${DB_NAME}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-7}
    volumes:
      - mysql_backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    depends_on:
      - mysql
    networks:
      - my-many-books-network
    restart: always
    command: /backup.sh
    profiles:
      - with-backup

volumes:
  mysql_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/my-many-books/data/mysql
  redis_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/my-many-books/data/redis
  mysql_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/my-many-books/backups
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/my-many-books/logs/nginx

networks:
  my-many-books-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16