{
  "name": "my-many-books-api",
  "version": "1.0.0",
  "description": "Serverless API for My Many Books - Personal library management system",
  "main": "dist/handlers/index.js",
  "scripts": {
    "build": "tsc",
    "build:watch": "tsc --watch",
    "dev": "nodemon --exec ts-node src/handlers/index.ts",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:integration": "jest tests/integration --runInBand",
    "test:integration:coverage": "jest tests/integration --coverage --runInBand",
    "test:unit": "jest tests --ignore tests/integration",
    "test:all": "npm run test:unit && npm run test:integration",
    "lint": "eslint src/**/*.ts",
    "lint:fix": "eslint src/**/*.ts --fix",
    "format": "prettier --write src/**/*.ts",
    "deploy": "serverless deploy",
    "deploy:dev": "serverless deploy --stage dev",
    "deploy:prod": "serverless deploy --stage prod",
    "package": "serverless package",
    "local": "serverless offline",
    "remove": "serverless remove",
    "db:test": "npm run test -- tests/config/",
    "db:connect": "ts-node -e \"import('./src/config/database').then(db => db.default.testConnection())\"",
    "db:create": "ts-node scripts/create-database.ts",
    "db:migrate": "npx sequelize-cli db:migrate",
    "db:migrate:undo": "npx sequelize-cli db:migrate:undo",
    "db:migrate:undo:all": "npx sequelize-cli db:migrate:undo:all",
    "db:migrate:status": "npx sequelize-cli db:migrate:status",
    "db:seed": "npx sequelize-cli db:seed:all",
    "db:seed:undo": "npx sequelize-cli db:seed:undo",
    "db:seed:undo:all": "npx sequelize-cli db:seed:undo:all",
    "db:init": "ts-node scripts/init-database.ts",
    "db:reset": "npm run db:migrate:undo:all && npm run db:migrate && npm run db:seed",
    "db:status": "npm run db:migrate:status",
    "db:sync": "ts-node -e \"import('./src/utils/database').then(db => db.DatabaseUtils.initialize().then(() => db.DatabaseUtils.syncDatabase({ alter: true })))\"",
    "migration:generate": "npx sequelize-cli migration:generate --name",
    "seed:generate": "npx sequelize-cli seed:generate --name",
    "test:isbn": "jest tests/utils/isbn.test.ts",
    "isbn:validate": "ts-node -e \"import('./src/utils/isbn').then(isbn => console.log(isbn.validateIsbn(process.argv[2])))\"",
    "isbn:format": "ts-node -e \"import('./src/utils/isbn').then(isbn => console.log(isbn.formatIsbn(process.argv[2])))\"",
    "test:openlibrary": "jest tests/services/openLibraryClient.test.ts",
    "openlibrary:fetch": "ts-node -e \"import('./src/services/openLibraryClient').then(ol => ol.openLibraryClient.fetchBookByIsbn(process.argv[2]).then(console.log))\"",
    "openlibrary:search": "ts-node -e \"import('./src/services/openLibraryClient').then(ol => ol.openLibraryClient.searchBooksByTitle(process.argv[2]).then(console.log))\"",
    "openlibrary:health": "ts-node -e \"import('./src/services/openLibraryClient').then(ol => ol.openLibraryClient.healthCheck().then(console.log))\"",
    "test:isbn-service": "jest tests/services/isbnService.test.ts",
    "test:data-transformer": "jest tests/services/dataTransformer.test.ts",
    "isbn:lookup": "ts-node -e \"import('./src/services/isbnService').then(s => s.isbnService.lookupBook(process.argv[2]).then(console.log))\"",
    "isbn:search": "ts-node -e \"import('./src/services/isbnService').then(s => s.isbnService.searchByTitle(process.argv[2]).then(console.log))\"",
    "isbn:health": "ts-node -e \"import('./src/services/isbnService').then(s => s.isbnService.checkServiceHealth().then(console.log))\"",
    "test:circuit-breaker": "jest tests/utils/circuitBreaker.test.ts",
    "test:retry-policy": "jest tests/utils/retryPolicy.test.ts",
    "test:fallback": "jest tests/services/fallbackService.test.ts",
    "isbn:resilience": "ts-node -e \"import('./src/services/isbnService').then(s => s.isbnService.getResilienceStats().then(console.log))\"",
    "isbn:fallback": "ts-node -e \"import('./src/services/isbnService').then(s => s.isbnService.addFallbackBook(process.argv[2], process.argv[3]))\"",
    "isbn:reset": "ts-node -e \"import('./src/services/isbnService').then(s => s.isbnService.resetResilience())\"",
    "generate:api-keys": "ts-node scripts/generate-api-keys.ts",
    "docs:serve": "swagger-ui-serve docs/api-specification.yml",
    "validate:config": "ts-node -e \"console.log('Configuration validation complete')\"",
    "security:scan": "npm audit && echo 'Security scan complete'"
  },
  "keywords": [
    "books",
    "library",
    "isbn",
    "aws",
    "lambda",
    "serverless",
    "typescript",
    "api"
  ],
  "author": "Your Name",
  "license": "MIT",
  "dependencies": {
    "aws-sdk": "^2.1490.0",
    "axios": "^1.6.2",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "joi": "^17.11.0",
    "jsonwebtoken": "^9.0.2",
    "mysql2": "^3.6.5",
    "sequelize": "^6.35.0",
    "uuid": "^9.0.1"
  },
  "devDependencies": {
    "@sequelize/cli": "^7.0.0-alpha.46",
    "@types/aws-lambda": "^8.10.130",
    "@types/cors": "^2.8.17",
    "@types/jest": "^29.5.8",
    "@types/jsonwebtoken": "^9.0.10",
    "@types/node": "^20.9.0",
    "@types/uuid": "^9.0.7",
    "@typescript-eslint/eslint-plugin": "^8.39.1",
    "@typescript-eslint/parser": "^8.39.1",
    "eslint": "^8.54.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-prettier": "^5.0.1",
    "jest": "^29.7.0",
    "nodemon": "^3.0.1",
    "prettier": "^3.1.0",
    "serverless": "^4.18.0",
    "serverless-esbuild": "^1.55.1",
    "serverless-offline": "^14.4.0",
    "sqlite3": "^5.1.6",
    "supertest": "^6.3.3",
    "ts-jest": "^29.1.1",
    "ts-node": "^10.9.1",
    "typescript": "^5.2.2"
  },
  "engines": {
    "node": ">=18.0.0"
  }
}
